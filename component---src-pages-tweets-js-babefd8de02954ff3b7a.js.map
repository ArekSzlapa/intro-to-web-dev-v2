{"version":3,"file":"component---src-pages-tweets-js-babefd8de02954ff3b7a.js","mappings":"2HAUA,SAASA,EAAQC,EAAKC,GACpB,IAAKC,MAAMC,QAAQH,GACjB,MAAM,IAAII,MAAM,yCAGlBH,EAAUA,GAAW,GACrB,IAGII,EACAC,EAJAC,EAAaP,EACbQ,EAAMR,EAAIS,OACVC,EAAMT,EAAQS,KAAOC,KAAKN,OAQ9B,KAJqB,IAAjBJ,EAAQW,OACVL,EAAaP,EAAIa,SAGZL,GACLH,EAASM,KAAKG,MAAMJ,IAAQF,GAE5BF,EAAOC,EADPC,GAAO,GAEPD,EAAWC,GAAOD,EAAWF,GAC7BE,EAAWF,GAAUC,EAGvB,OAAOC,EAaTR,EAAQgB,KAAO,SAAUf,EAAKC,GAC5B,IAAKC,MAAMC,QAAQH,GACjB,MAAM,IAAII,MAAM,gDAIlB,IAAIM,GADJT,EAAUA,GAAW,IACHS,KAAOC,KAAKN,OAC1BW,EAAQf,EAAQe,OAAS,EAE7B,GAAqB,iBAAVA,GAAgC,IAAVA,EAAa,CAM5C,IALA,IAGIC,EAHAT,EAAMR,EAAIS,OACVF,EAAaP,EAAIa,QACjBR,EAAS,GAGNW,GAASR,GACdS,EAAQN,KAAKG,MAAMJ,IAAQF,GAC3BH,EAAOa,KAAKX,EAAWU,IACvBV,EAAWY,OAAOF,EAAO,GACzBT,GAAO,EACPQ,GAAS,EAGX,OAAOX,EAGT,OAAOL,EAAIW,KAAKG,MAAMJ,IAAQV,EAAIS,UAOpCW,EAAOC,QAAUtB,G,0FC3EXuB,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,IAAAA,IAAAA,EAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GACI,OADJA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAAAA,MACJC,MAAQ,CACNC,OAAQzB,GAAAA,CAAQ0B,EAAAA,IADV,EAcP,OAfGH,EAAAA,EAAAA,GAAAA,EAAAA,GACI,YAGRI,OAAA,WACE,OACE,uBAAKC,UAAU,oBACb,uBAAKA,UAAU,sBACb,uDACCC,KAAKL,MAAMC,OAAOK,KAAI,SAAAC,GAAE,OACvB,gBAAC,KAAD,CAAOC,IAAKD,EAAIE,QAASF,EAAI7B,QAAS,CAAEgC,aAAc,gBAK/D,EAfGX,CAAeY,EAAAA,WAkBrB","sources":["webpack://intro-to-web-dev-v2/./node_modules/shuffle-array/index.js","webpack://intro-to-web-dev-v2/./src/pages/tweets.js"],"sourcesContent":["'use strict';\n/**\n * Randomize the order of the elements in a given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Boolean} [options.copy] - Sets if should return a shuffled copy of the given array. By default it's a falsy value.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Array}\n */\n\nfunction shuffle(arr, options) {\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle expect an array as parameter.');\n  }\n\n  options = options || {};\n  var collection = arr,\n      len = arr.length,\n      rng = options.rng || Math.random,\n      random,\n      temp;\n\n  if (options.copy === true) {\n    collection = arr.slice();\n  }\n\n  while (len) {\n    random = Math.floor(rng() * len);\n    len -= 1;\n    temp = collection[len];\n    collection[len] = collection[random];\n    collection[random] = temp;\n  }\n\n  return collection;\n}\n\n;\n/**\n * Pick one or more random elements from the given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Number} [options.picks] - Specifies how many random elements you want to pick. By default it picks 1.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Object}\n */\n\nshuffle.pick = function (arr, options) {\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle.pick() expect an array as parameter.');\n  }\n\n  options = options || {};\n  var rng = options.rng || Math.random,\n      picks = options.picks || 1;\n\n  if (typeof picks === 'number' && picks !== 1) {\n    var len = arr.length,\n        collection = arr.slice(),\n        random = [],\n        index;\n\n    while (picks && len) {\n      index = Math.floor(rng() * len);\n      random.push(collection[index]);\n      collection.splice(index, 1);\n      len -= 1;\n      picks -= 1;\n    }\n\n    return random;\n  }\n\n  return arr[Math.floor(rng() * arr.length)];\n};\n/**\n * Expose\n */\n\n\nmodule.exports = shuffle;","import React from \"react\";\nimport { Tweet } from \"react-twitter-widgets\";\nimport shuffle from \"shuffle-array\";\nimport ids from \"../tweetIds\";\n\nclass Tweets extends React.Component {\n  state = {\n    tweets: shuffle(ids)\n  };\n  render() {\n    return (\n      <div className=\"lesson-container\">\n        <div className=\"lesson lesson-flex\">\n          <h1>Hooray! You made it here!</h1>\n          {this.state.tweets.map(id => (\n            <Tweet key={id} tweetId={id} options={{ conversation: \"none\" }} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tweets;\n"],"names":["shuffle","arr","options","Array","isArray","Error","random","temp","collection","len","length","rng","Math","copy","slice","floor","pick","picks","index","push","splice","module","exports","Tweets","state","tweets","ids","render","className","this","map","id","key","tweetId","conversation","React"],"sourceRoot":""}